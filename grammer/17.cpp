/*2022年11月10日18:40:43
存储持续性，作用域和链接性*/

//默认情况下函数的链接性为外部，因此可以在文件间共享，但是用static关键字限定的函数的链接性为内部的，被限制在定义它的文件中
#include <iostream>

//持续性：自动存储持续性，静态存储持续性，动态存储持续性（区别在于数据保留在内存中的时间）
//作用域描述了名称文件的多大范围内可见
//链接性描述了名称如何在不同单元间共享

using namespace std;

//作用域我们这里不多赘述，只需要知道，内层的变量可以覆盖外层的变量，局部变量可以隐藏全局变量
//这里也不赘述自动变量了，自动变量和堆栈的原理有关

//这里着重强调静态持续变量
//静态持续变量有三种链接性，外部链接性，内部链接性，无链接性

//在函数外面定义的变量的持续性为静态存储持续性

//这里是外部链接，静态存储的变量的变量定义声明（简称定义）
int global=1000;//静态存储持续性，外部链接（也就是说，这个变量可以被别文件引用，通过引用声明，这也是链接性决定的）
//在其他文件中，具有外部链接属性的变量可以通过extern int global（引用声明）来使用这个文件的这个变量（简称声明）

//在函数外面加上static,就可以变成内部链接
static int one_flie=50;// 静态储存持续性，内部链接（只能在这个文件中使用，内部链接决定的）
//上面两个文件的定义域都是全局

//静态变量将隐藏常规外部变量
int main (void)
{
    //静态存储持续性，无链接性，定义域只在这个代码块中可用，但他在该代码块不处于活动状态时依旧存在，且只在程序启动时进行一次初始化
    static int count=0;
    //自动存储持续性，在代码块结束时即销毁
    int llama=0;
    //局部变量global将隐藏外部变量global，所以第一个输出40，但是：：（作用域解析操作符）放在变量名前时，表示使用该变量的全局版本
    static int global=40;
    cout<<global<<endl<<::global;


    //动态存储持续性
    float * p_fees =new float[20];//这个语句只能在函数中使用
    //如果他写在函数外面，他就是一个静态存储的指针，而静态存储变量只能被常量表达式初始化
    //因为静态存储将会在程序执行前就被初始化好，但是动态储存将会在执行到这条语句时才查找分配内存，也就是说地址是不确定的（变量）
    //由变量分配的内存会一直保留在内存中，直到delete或者程序结束，但是p_fees指针不是这样，这个指针变量是自动储存类型的
    //切记
}