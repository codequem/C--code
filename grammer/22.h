/*2022年11月12日19:06:33
类*/
#ifndef stock_h
#define stock_h

class stock//class关键字指出这些代码定义了一个类设计，其中stock是这个新类的类型名
//该声明让我们能声明stock类型的变量-----称为实例或对象


{//类成员可以是数据类型，也可以是函数
    private://私有的
    //要存储的数据，即类数据成员
    char company[30];//公司名称
    static const int len=30//作用域为整个类的变量（使用关键字static），该变量会和其他静态变量储存在一起，而不是存在对象中
    //因此，只有一个len常量，它被所有stock对象共享，或者利用枚举
    //enum{len=30},与上面效果一致，因为只是为了创建符号常量，所以可以不提供枚举名
    //const int len=30，这样并不是创建了一个作用域为整个类的常量，因为这只是类声明，并不真正创建对象，因此也没有存放这个
    //值的空间，所以要借助静态变量（在程序执行前就储存好了的特性，来创建这种常量）
    //这些技术都只能声明值为整数或枚举的静态常量，不能储存double常量
    int shares;//股票数量
    double total_val;//总价值
    double share_val;//单支股票价值
    //以下都是要执行的操作，即类函数成员，成员函数可以就地定义，也可以像下面的这些以原型表示
    void set_tot(){total_val=shares*share_val;}
    //定义位于类声明中的函数都将自动成为内联函数，如果愿意，在类声明之外加上inline也可以将成员函数编程内联的
    //内联函数的特殊规则要求在每个使用他们的文件中都对其定义，确保内联定义对多文件程序中的所有文件都是可用的
    //最简便的方法是将内联定义放在定义类的头文件中
    //也就是说，在类声明中定义方法等同于在类声明中定义原型，再把内联函数定义紧接着在类声明之后定义是一样的
    public://公共的
    //使用类对象的程序都可以直接访问公有部分，但是只能通过公有成员函数（或者友元函数）来访问对象的私有成员
    //公有成员函数是程序和对象的私有成员之间的桥梁，提供了对象和程序之间的窗口，防止程序直接访问数据被称为数据隐藏

    //构造函数，专门用于构造新对象，将值赋给它的数据成员
    stock(const char*co="null",int n=0,double pr=0.0);//构造函数（非默认构造函数），当有非默认构造函数的时候默认构造函数将会被隐藏
    //c++还有默认的构造函数，就是不提供任何初始化值，直接声明对象，即不初始化其成员
    //其原型位于类声明的公有部分，且没有返回类型,通常应该提供对所有类成员做隐式初始化的默认构造函数，否则必须
    //在声明一个对象的时候显式的对它的所有元素进行初始化，否则会报错

    //stock first("test");//调用接受参数的构造函数（非默认构造函数）
    //stock second();//这是一个返回stock对象的函数
    //stock third;//隐式的使用默认构造函数

    //析构函数，用构造函数创建对象后，程序负责跟踪该对象，直到其过期为止，对象过期时，程序自动调用析构函数---它完成清理工作
    //必须要有
    ~stock();//析构函数没有返回值，可以没有声明类型，因此它的原型必须是这样的（前面要加~）
    //通常不应该在代码中显式的调用析构函数，如果创建的是静态存储类对象，则其析构函数将在程序结束时自动被调用
    //如果对象是使用new来创建的，则它将驻留在堆栈内存或自由储存区中，当使用delete来释放内存时，析构函数将自动被调用


    void acquire(const char*co,int n,double pr);
    void buy(int num,double price);
    void sell(int num,double price);
    void update(double price);
    const stock& topval(const stock& s)const; 
    void show()const;//const成员函数，这种函数在（）后放const，表明不修改调用对象（这就是使用这个类方法的对象）
    //类设计尽可能将公有接口和实现细节分开，公有结构表示设计的抽象组件，将实现细节放在一起并把它们和抽象分开被称为封装
    //数据隐藏是一种封装，将实现的细节隐藏在私有部分中，也是一种封装，将类函数定义和类声明放在不同的文件中同样是一种封装
};//注意类声明完了以后后面有一个分号
//通常把数据项放在私有部分，组成类接口的成员函数放在公有部分，也可以把成员函数放在私有部分中。不能直接从程序中调用这种函数
//但是公有的方法却可以使用他们，通常使用私有成员函数来处理不属于公有接口的实现细节
//编写这个类的人可以使用它，但是使用这个类的人不行
//不用在类声明中使用关键字private，因为这是类对象的默认访问控制，如果为了强调数据隐藏可以使用（但没必要），只要用好public就行

//类和结构的唯一区别是，结构的默认访问类型是public，而类是private
//c++程序员通常使用类来实现类描述，而把结构限制为只表示纯粹的数据对象或没有私有部分的类

//为类声明中的原型表示的成员函数提供定义：
//成员函数与常规函数定义非常相似，但是它们还有两个特殊的特征:1.定义成员函数时，使用作用域解析操作符来标识函数所属的类
//2.类方法可以访问类的private组件
//类方法的完整名称中包括类名，我们说stock::update()是函数的限定名，而简单的update是全名的缩写，只能在类作用域中使用
#endif